{"version":3,"sources":["img/logo-ai.svg","img/logo-react.svg","img/heart.svg","NavBar.tsx","../../react-appinsights/dist-esm/src/ReactAI.js","../../react-appinsights/dist-esm/src/withAITracking.js","DemoPageA.tsx","DemoPageB.tsx","DemoPageC.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Link","to","Component","reactAI","ReactAI","this","extensionId","ApplicationInsightsAnalyticsIdentifier","identifier","priority","contextProps","debug","processTelemetry","customDimensionsInitializer","bind","prototype","setNextPlugin","plugin","nextPlugin","Object","defineProperty","get","enumerable","configurable","initialize","settings","core","extensions","_this","reactAISettings","extensionConfig","setContext","initialContext","forEach","ext","appInsights","applicationinsights_common","propertiesPlugin","history","addHistoryListener","pageViewTelemetry","uri","location","pathname","properties","context","_trackInitialPageViewInternal","telemetry","trackPageView","debugLog","clearPrevious","key","hasOwnProperty","envelope","baseData","props","listen","action","setTimeout","message","payload","isDebugMode","console","log","undefined","withAITracking","componentName","constructor","name","_super","class_1","apply","arguments","mountTimestamp","firstActiveTimestamp","idleStartTimestamp","lastActiveTimestamp","totalIdleTime","idleCount","idleTimeout","trackActivity","e","Date","now","lastIdleTime","tslib_es6","componentDidMount","intervalId","setInterval","componentWillUnmount","Error","clearInterval","engagementTime","getEngagementTimeSeconds","metricData","average","sampleCount","additionalProperties","Component Name","trackMetric","render","node_modules_react","onKeyDown","onMouseMove","onScroll","onMouseDown","onTouchStart","onTouchMove","from","firstActiveTime","idleStartTime","idleTimeMs","lastActiveTime","DemoPageA","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","trackException","assertThisInitialized","trackTrace","trackEvent","throwError","ajaxRequest","error","severityLevel","setState","xhr","XMLHttpRequest","open","send","react","onClick","role","React","NavBar_App","Route","path","component","PageA","exact","PageB","PageC","src","logoReact","alt","logoAI","heart","href","target","rel","Boolean","window","hostname","match","dotenv","config","createBrowserHistory","basename","process","ApplicationInsights","instrumentationKey","loadAppInsights","ReactDOM","Router","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09bbc5ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-ai.1e2d2217.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-react.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/heart.4e01da79.svg\";","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class App extends Component {\r\n  public render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\">\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExampleDefault\" aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\">\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item active\">\r\n              <Link className=\"nav-link\" to={'/demo-a'} >Page A</Link>\r\n            </li>\r\n            <li className=\"nav-item active\">\r\n              <Link className=\"nav-link\" to={'/demo-b'} >Page B</Link>\r\n            </li>\r\n            <li className=\"nav-item active\">\r\n              <Link className=\"nav-link\" to={'/demo-c'} >Page C</Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { PropertiesPluginIdentifier } from \"@microsoft/applicationinsights-common\";\n/**\r\n * Module to include Microsoft Application Insights in React applications.\r\n *\r\n * @export\r\n * @class ReactAI\r\n */\n\nvar ReactAI =\n/** @class */\nfunction () {\n  function ReactAI() {\n    this.extensionId = \"ApplicationInsightsReactUsage\";\n    this.ApplicationInsightsAnalyticsIdentifier = \"ApplicationInsightsAnalytics\";\n    this.identifier = this.extensionId;\n    this.priority = 190;\n    this.contextProps = {};\n    this.debug = false;\n    this.processTelemetry = this.customDimensionsInitializer.bind(this);\n  }\n\n  ReactAI.prototype.setNextPlugin = function (plugin) {\n    this.nextPlugin = plugin;\n  };\n\n  Object.defineProperty(ReactAI.prototype, \"context\", {\n    /**\r\n     * Returns the current value of context/custom dimensions.\r\n     *\r\n     * @readonly\r\n     * @type {{ [key: string]: any }}\r\n     * @memberof ReactAI\r\n     */\n    get: function get() {\n      return this.contextProps || {};\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ReactAI.prototype, \"isDebugMode\", {\n    /**\r\n     * Returns if ReactAI is in debug mode.\r\n     *\r\n     * @readonly\r\n     * @type {boolean}\r\n     * @memberof ReactAI\r\n     */\n    get: function get() {\n      return this.debug;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Initializes a singleton instance of ReactAI based on supplied parameters.\r\n   *\r\n   * @param {IReactAISettings} settings\r\n   * @memberof ReactAI\r\n   */\n\n  ReactAI.prototype.initialize = function (settings, core, extensions) {\n    var _this = this;\n\n    var reactAISettings = settings.extensionConfig && settings.extensionConfig[this.identifier] ? settings.extensionConfig[this.identifier] : {\n      debug: false\n    };\n    this.debug = reactAISettings.debug || false;\n    this.setContext(reactAISettings.initialContext || {}, true);\n    extensions.forEach(function (ext) {\n      var identifier = ext.identifier;\n\n      if (identifier === _this.ApplicationInsightsAnalyticsIdentifier) {\n        _this.appInsights = ext;\n      }\n\n      if (identifier === PropertiesPluginIdentifier) {\n        _this.propertiesPlugin = ext;\n      }\n    });\n\n    if (reactAISettings.history) {\n      this.addHistoryListener(reactAISettings.history);\n      var pageViewTelemetry = {\n        uri: reactAISettings.history.location.pathname,\n        properties: this.context\n      };\n\n      this._trackInitialPageViewInternal(pageViewTelemetry);\n    }\n  }; // internal only, public method for testing\n\n\n  ReactAI.prototype._trackInitialPageViewInternal = function (telemetry) {\n    // Record initial page view, since history.listen is not fired for the initial page\n    // (see: https://github.com/ReactTraining/history/issues/479#issuecomment-307544999 )\n    this.appInsights.trackPageView(telemetry);\n    this.debugLog(\"recording initial page view.\", \"uri: \" + location.pathname);\n  };\n  /**\r\n   * Set custom context/custom dimensions for Application Insights\r\n   *\r\n   * @param {{ [key: string]: any }} properties - custom properties to add to all outbound Application Insights telemetry\r\n   * @param {boolean} [clearPrevious=false] - if false(default) multiple calls to setContext will append to/overwrite existing custom dimensions, if true the values are reset\r\n   * @memberof ReactAI\r\n   */\n\n\n  ReactAI.prototype.setContext = function (properties, clearPrevious) {\n    if (clearPrevious === void 0) {\n      clearPrevious = false;\n    }\n\n    if (clearPrevious) {\n      this.contextProps = {};\n      this.debugLog(\"context is reset.\");\n    }\n\n    properties = properties || {};\n\n    for (var key in properties) {\n      if (properties.hasOwnProperty(key)) {\n        this.contextProps[key] = properties[key];\n      }\n    }\n\n    this.debugLog(\"context is set to:\", this.context);\n  };\n\n  ReactAI.prototype.customDimensionsInitializer = function () {\n    var _this = this;\n\n    return function (envelope) {\n      envelope.baseData = envelope.baseData || {};\n      envelope.baseData.properties = envelope.baseData.properties || {};\n      var properties = envelope.baseData.properties;\n      var props = _this.context;\n\n      for (var key in props) {\n        if (props.hasOwnProperty(key)) {\n          properties[key] = props[key];\n        }\n      }\n    };\n  };\n\n  ReactAI.prototype.addHistoryListener = function (history) {\n    var _this = this;\n\n    history.listen(function (location, action) {\n      // Timeout to ensure any changes to the DOM made by route changes get included in pageView telemetry\n      setTimeout(function () {\n        var pageViewTelemetry = {\n          uri: location.pathname,\n          properties: _this.context\n        };\n\n        _this.appInsights.trackPageView(pageViewTelemetry);\n\n        _this.debugLog(\"recording page view.\", \"uri: \" + location.pathname + \" action: \" + action);\n      }, 500);\n    });\n  };\n\n  ReactAI.prototype.debugLog = function (message, payload) {\n    if (this.isDebugMode) {\n      console.log(\"ReactAI: \" + message, payload === undefined ? \"\" : payload);\n    }\n  };\n\n  return ReactAI;\n}();\n\nexport var reactAI = new ReactAI();","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport { reactAI } from \"./ReactAI\";\n/**\r\n * Higher-order component function to hook Application Insights tracking\r\n * in a React component's lifecycle.\r\n *\r\n * @param Component the component to be instrumented with Application Insights tracking\r\n * @param componentName (optional) component name\r\n */\n\nexport default function withAITracking(Component, componentName) {\n  if (componentName === undefined || componentName === null || typeof componentName !== 'string') {\n    componentName = Component.prototype.constructor.name;\n  }\n\n  return (\n    /** @class */\n    function (_super) {\n      tslib_1.__extends(class_1, _super);\n\n      function class_1() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n\n        _this.mountTimestamp = 0;\n        _this.firstActiveTimestamp = 0;\n        _this.idleStartTimestamp = 0;\n        _this.lastActiveTimestamp = 0;\n        _this.totalIdleTime = 0;\n        _this.idleCount = 0;\n        _this.idleTimeout = 5000;\n\n        _this.trackActivity = function (e) {\n          if (_this.firstActiveTimestamp === 0) {\n            _this.firstActiveTimestamp = Date.now();\n            _this.lastActiveTimestamp = _this.firstActiveTimestamp;\n          } else {\n            _this.lastActiveTimestamp = Date.now();\n          }\n\n          if (_this.idleStartTimestamp > 0) {\n            var lastIdleTime = _this.lastActiveTimestamp - _this.idleStartTimestamp;\n            _this.totalIdleTime += lastIdleTime;\n\n            _this.debugLog(\"trackActivity\", \"Idle to active added \" + lastIdleTime / 1000 + \" seconds of idle time.\");\n\n            _this.idleStartTimestamp = 0;\n          }\n        };\n\n        return _this;\n      }\n\n      class_1.prototype.componentDidMount = function () {\n        var _this = this;\n\n        this.mountTimestamp = Date.now();\n        this.firstActiveTimestamp = 0;\n        this.totalIdleTime = 0;\n        this.lastActiveTimestamp = 0;\n        this.idleStartTimestamp = 0;\n        this.idleCount = 0;\n        this.intervalId = setInterval(function () {\n          if (_this.lastActiveTimestamp > 0 && _this.idleStartTimestamp === 0 && Date.now() - _this.lastActiveTimestamp >= _this.idleTimeout) {\n            _this.idleStartTimestamp = Date.now();\n            _this.idleCount++;\n\n            _this.debugLog(\"componentDidMount\", \"Starting idle time.\");\n          }\n        }, 100);\n      };\n\n      class_1.prototype.componentWillUnmount = function () {\n        if (this.mountTimestamp === 0) {\n          throw new Error(\"withAITracking:componentWillUnmount: mountTimestamp isn't initialized.\");\n        }\n\n        if (!reactAI.appInsights) {\n          throw new Error(\"withAITracking:componentWillUnmount: ReactAI isn't initialized.\");\n        }\n\n        if (this.intervalId) {\n          clearInterval(this.intervalId);\n        }\n\n        if (this.firstActiveTimestamp === 0) {\n          this.debugLog(\"componentWillUnmount\", \"Nothing to track.\");\n          return;\n        }\n\n        var engagementTime = this.getEngagementTimeSeconds();\n        var metricData = {\n          average: engagementTime,\n          name: \"React Component Engaged Time (seconds)\",\n          sampleCount: 1\n        };\n        var additionalProperties = {\n          \"Component Name\": componentName\n        };\n        this.debugLog(\"componentWillUnmount\", \"Tracking \" + engagementTime + \" seconds of engagement time for \" + componentName + \".\");\n        reactAI.appInsights.trackMetric(metricData, additionalProperties);\n      };\n\n      class_1.prototype.render = function () {\n        return React.createElement(\"div\", {\n          onKeyDown: this.trackActivity,\n          onMouseMove: this.trackActivity,\n          onScroll: this.trackActivity,\n          onMouseDown: this.trackActivity,\n          onTouchStart: this.trackActivity,\n          onTouchMove: this.trackActivity\n        }, React.createElement(Component, tslib_1.__assign({}, this.props)));\n      };\n\n      class_1.prototype.debugLog = function (from, message) {\n        if (reactAI.isDebugMode) {\n          console.log(\"withAITracking:\" + componentName + \":\" + from + \": \" + message, {\n            engagementTime: this.getEngagementTimeSeconds(),\n            firstActiveTime: this.firstActiveTimestamp,\n            idleStartTime: this.idleStartTimestamp,\n            idleTimeMs: this.totalIdleTime,\n            lastActiveTime: this.lastActiveTimestamp,\n            mountTimestamp: this.mountTimestamp\n          });\n        }\n      };\n\n      class_1.prototype.getEngagementTimeSeconds = function () {\n        return (Date.now() - this.firstActiveTimestamp - this.totalIdleTime - this.idleCount * this.idleTimeout) / 1000;\n      };\n\n      return class_1;\n    }(React.Component)\n  );\n}","import * as React from 'react';\r\nimport { reactAI, withAITracking } from 'react-appinsights';\r\n\r\ninterface State {\r\n  message: string;\r\n}\r\n\r\nclass DemoPageA extends React.Component<any, State> {\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    // Set the state directly. Use props if necessary.\r\n    this.state = {\r\n      message: \"\",\r\n    }\r\n\r\n    this.trackException = this.trackException.bind(this);\r\n    this.trackTrace = this.trackTrace.bind(this);\r\n    this.trackEvent = this.trackEvent.bind(this);\r\n    this.throwError = this.throwError.bind(this);\r\n    this.ajaxRequest = this.ajaxRequest.bind(this);\r\n  }\r\n\r\n  trackException() {\r\n    reactAI.appInsights.trackException({ error: new Error('some error'), severityLevel: 3 });\r\n    this.setState({ message: \"Exception explicitly tracked\" });\r\n  }\r\n\r\n  trackTrace() {\r\n    reactAI.appInsights.trackTrace({ message: 'some trace', severityLevel: 1 });\r\n    this.setState({ message: \"Trace explicitly tracked\" });\r\n  }\r\n\r\n  trackEvent() {\r\n    reactAI.appInsights.trackEvent({ name: 'some event' });\r\n    this.setState({ message: \"Event explicitly tracked\" });\r\n  }\r\n\r\n  throwError() {\r\n    this.setState({ message: \"Error thrown and automatically collected\" });\r\n    // This will crash the app; the error will show up in the Azure Portal\r\n    throw new Error(\"Error Foo Bar\");\r\n  }\r\n\r\n  ajaxRequest() {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', 'https://httpbin.org/status/200');\r\n    xhr.send();\r\n    this.setState({ message: \"Ajax request performed and automatically collected\" });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"main-text\">Demo Page A</div>\r\n        <button type=\"button\" className=\"btn btn-outline-warning btn-lg\" onClick={this.trackException} >Track Exception</button>\r\n        <button type=\"button\" className=\"btn btn-outline-primary btn-lg\" onClick={this.trackEvent} >Track Event</button>\r\n        <button type=\"button\" className=\"btn btn-outline-info btn-lg\" onClick={this.trackTrace} >Track Trace</button><br />\r\n        <button type=\"button\" className=\"btn btn-outline-light btn-lg\" onClick={this.ajaxRequest} >Autocollect a Request</button>\r\n        <button type=\"button\" className=\"btn btn-outline-danger btn-lg\" onClick={this.throwError} >Autocollect an Error</button>\r\n        <br />...or navigate to another page to trigger component-based page tracking.\r\n        {this.state.message !== \"\" &&\r\n          <div className=\"alert alert-primary\" role=\"alert\">\r\n            {this.state.message}\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withAITracking(DemoPageA);\r\n","import React, { Component } from 'react';\r\nimport { withAITracking } from 'react-appinsights';\r\n\r\nclass DemoPageB extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"main-text\">Demo Page B</div>\r\n        <p><small>(This page is just intended to demo the page view tracking feature of <code>react-appinsights</code>)</small></p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withAITracking(DemoPageB);\r\n","import React, { Component } from 'react';\r\nimport { withAITracking } from 'react-appinsights';\r\n\r\nclass DemoPageC extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"main-text\">Demo Page C</div>\r\n        <p><small>(This page is just intended to demo the page view tracking feature of <code>react-appinsights</code>)</small></p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withAITracking(DemoPageC);\r\n","import React, { Component } from 'react';\nimport NavBar from './NavBar'\nimport logoAI from './img/logo-ai.svg';\nimport logoReact from './img/logo-react.svg';\nimport heart from './img/heart.svg';\nimport './App.css';\n\nimport { Route } from 'react-router-dom';\nimport PageA from './DemoPageA';\nimport PageB from './DemoPageB';\nimport PageC from './DemoPageC';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar />\n        <div className=\"main\">\n          <div className=\"page-content\">\n            <Route path='/' component={PageA} exact={true} />\n            <Route path='/demo-a' component={PageA} />\n            <Route path='/demo-b' component={PageB} />\n            <Route path='/demo-c' component={PageC} />\n          </div>\n\n          <div className=\"bottom-link main-text\">\n            <div className=\"logos\">\n              <img src={logoReact} className=\"logo\" alt=\"React\" />\n              +\n              <img src={logoAI} className=\"logo\" alt=\"Application Insights\" />\n              =\n              <img src={heart} id=\"heart\" className=\"logo\" alt=\"love\" />\n            </div>\n\n            <span className=\"bottom-text\">This is a demo application of Application Insights and React, using </span>\n            <a className=\"react-ai-link\"\n              href=\"https://github.com/Azure/react-appinsights#react-appinsights\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              react-appinsights\n            </a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Router } from 'react-router-dom';\nimport { reactAI } from 'react-appinsights';\nimport { ApplicationInsights } from \"@microsoft/applicationinsights-web\";\nimport { createBrowserHistory } from \"history\"\n\nimport dotenv from 'dotenv';\ndotenv.config();\n\nconst history = createBrowserHistory({ basename: process.env.PUBLIC_URL });\nconst IK = process.env.REACT_APP_APPINSIGHTS_KEY === undefined ? \"XXX\" : process.env.REACT_APP_APPINSIGHTS_KEY;\n\nlet appInsights = new ApplicationInsights({\n    config: {\n        instrumentationKey: IK,\n        extensions: [reactAI],\n        extensionConfig: {\n            [reactAI.extensionId]: { debug: true }\n        }\n    }\n});\nappInsights.loadAppInsights();\n\nReactDOM.render(<Router history={history} >\n    <App />\n</Router >, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}